/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-04-11 18:44:59.347995
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37;
x0=IKsin(j[0]);
x1=IKcos(j[0]);
x2=IKsin(j[1]);
x3=((0.375)*x2);
x4=(x1*x3);
x5=IKcos(j[2]);
x6=IKsin(j[2]);
x7=IKcos(j[1]);
x8=((0.375)*x6*x7);
x9=IKsin(j[3]);
x10=(x2*x6);
x11=((0.042405)*x10);
x12=(x5*x7);
x13=((0.042405)*x12);
x14=IKcos(j[3]);
x15=((3.1e-7)*x10);
x16=((3.1e-7)*x12);
x17=(x2*x5);
x18=((3.1e-7)*x17);
x19=(x6*x7);
x20=((3.1e-7)*x19);
x21=((0.042405)*x17);
x22=((0.042405)*x19);
x23=(x0*x3);
x24=((0.375)*x7);
x25=IKsin(j[4]);
x26=((0.923878258400475)*x25);
x27=IKcos(j[4]);
x28=((0.382686508326207)*x27);
x29=((0.382686508326207)*x25);
x30=((1.0)*x12);
x31=((1.0)*x17);
x32=((1.0)*x19);
x33=(((x14*((((x1*x10))+(((-1.0)*(1.0)*x1*x30))))))+((x9*((((x1*x32))+((x1*x31)))))));
x34=((0.923878258400475)*x27);
x35=(((x14*(((((-1.0)*(1.0)*x0*x30))+((x0*x10))))))+((x9*((((x0*x31))+((x0*x32)))))));
x36=(x9*(((((-1.0)*(1.0)*x30))+(((1.0)*x10)))));
x37=(x14*(((((-1.0)*(1.0)*x31))+(((-1.0)*(1.0)*x32)))));
IkReal x38=((1.0)*x1);
eetrans[0]=(((x9*(((((-1.0)*x18*x38))+(((-1.0)*x20*x38))))))+((x9*(((((-1.0)*x11*x38))+((x1*x13))))))+((x1*x8))+x4+((x4*x5))+(((0.0244)*x0))+((x14*(((((-1.0)*x15*x38))+((x1*x16))))))+((x14*((((x1*x21))+((x1*x22)))))));
IkReal x39=((1.0)*x23);
IkReal x40=((1.0)*x0);
eetrans[1]=(((x9*((((x0*x20))+((x0*x18))))))+((x14*(((((-1.0)*x22*x40))+(((-1.0)*x21*x40))))))+(((-1.0)*x40*x8))+((x14*(((((-1.0)*x16*x40))+((x0*x15))))))+(((0.0244)*x1))+(((-1.0)*x39*x5))+((x9*(((((-1.0)*x13*x40))+((x0*x11))))))+(((-1.0)*x39)));
eetrans[2]=((0.354998)+((x9*((x15+(((-1.0)*(1.0)*x16))))))+x24+((x14*((x13+(((-1.0)*(1.0)*x11))))))+((x24*x5))+((x9*(((((-1.0)*(1.0)*x22))+(((-1.0)*(1.0)*x21))))))+((x14*(((((-1.0)*(1.0)*x20))+(((-1.0)*(1.0)*x18))))))+(((-1.0)*(1.0)*x3*x6)));
eerot[0]=(((x33*x34))+((x29*x33))+(((-1.0)*(1.0)*x0*x26))+((x0*x28)));
IkReal x41=((1.0)*x35);
eerot[1]=((((-1.0)*x34*x41))+(((-1.0)*(1.0)*x1*x26))+(((-1.0)*x29*x41))+((x1*x28)));
eerot[2]=(((x27*(((((-1.0)*(0.923878258400475)*x37))+(((-1.0)*(0.923878258400475)*x36))))))+((x25*(((((-1.0)*(0.382686508326207)*x37))+(((-1.0)*(0.382686508326207)*x36)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=((-1.0)*(((1.0)*r01)));
new_py=((-1.0)*(((1.0)*py)));
new_r02=((-1.0)*(((1.0)*r02)));
new_pz=((0.354998)+(((-1.0)*(1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((pz*pz)+(py*py)+(px*px));
{
IkReal j0eval[2];
j0eval[0]=((py*py)+(px*px));
j0eval[1]=((IKabs(py))+(IKabs(px)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2, j3, j4]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x44 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*(((1.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x44.valid){
continue;
}
IkReal x42=((-1.0)*(x44.value));
if((((py*py)+(px*px))) < -0.00001)
continue;
CheckValue<IkReal> x45=IKPowWithIntegerCheck(IKabs(IKsqrt(((py*py)+(px*px)))),-1);
if(!x45.valid){
continue;
}
if( (((0.0244)*(x45.value))) < -1-IKFAST_SINCOS_THRESH || (((0.0244)*(x45.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x43=IKasin(((0.0244)*(x45.value)));
j0array[0]=(x42+(((-1.0)*x43)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x42+x43);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((((-1.0)*(1.0)*r00*sj0))+((cj0*r01)))) < -1-IKFAST_SINCOS_THRESH || (((((-1.0)*(1.0)*r00*sj0))+((cj0*r01)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x46=IKasin(((((-1.0)*(1.0)*r00*sj0))+((cj0*r01))));
j4array[0]=((0.392702411097342)+x46);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.53429506468713)+(((-1.0)*x46)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x47=(cj0*r01);
IkReal x48=((0.036600000001956)*x47);
IkReal x49=(px*r00);
IkReal x50=((1.50000000008016)*x49);
IkReal x51=(py*r01);
IkReal x52=((1.50000000008016)*x51);
IkReal x53=(pz*r02);
IkReal x54=((1.50000000008016)*x53);
IkReal x55=(r00*sj0);
IkReal x56=((-0.036600000001956)*x55);
IkReal x57=((0.00240564810993096)*r02);
IkReal x58=(cj0*r00);
IkReal x59=((8.17168380592765e-6)*x58);
IkReal x60=(r01*sj0);
IkReal x61=((8.17168380592765e-6)*x60);
IkReal x62=(cj0*px*r02);
IkReal x63=((1.09656880079035e-5)*x62);
IkReal x64=(cj0*py*r02);
IkReal x65=((0.0976)*x64);
IkReal x66=((-1.0)*x65);
IkReal x67=(cj0*pz*r00);
IkReal x68=((-1.09656880079035e-5)*x67);
IkReal x69=(cj0*pz*r01);
IkReal x70=((0.0976)*x69);
IkReal x71=(px*pz*r00);
IkReal x72=((4.0)*x71);
IkReal x73=(px*r02*sj0);
IkReal x74=((0.0976)*x73);
IkReal x75=(py*pz*r01);
IkReal x76=((4.0)*x75);
IkReal x77=(py*r02*sj0);
IkReal x78=((1.09656880079035e-5)*x77);
IkReal x79=(pz*r00*sj0);
IkReal x80=((0.0976)*x79);
IkReal x81=((-1.0)*x80);
IkReal x82=(pz*r01*sj0);
IkReal x83=((-1.09656880079035e-5)*x82);
IkReal x84=px*px;
IkReal x85=(r02*x84);
IkReal x86=((2.0)*x85);
IkReal x87=((-1.0)*x86);
IkReal x88=py*py;
IkReal x89=(r02*x88);
IkReal x90=((2.0)*x89);
IkReal x91=((-1.0)*x90);
IkReal x92=pz*pz;
IkReal x93=(r02*x92);
IkReal x94=((2.0)*x93);
IkReal x95=((((-1.0)*x61))+x68+x66+x63+x91+x94+x81+x83+x87+(((-1.0)*x59))+x70+x72+x74+x76+x78+x48+x54+x50+x57+x56+x52);
IkReal x96=(px*r01);
IkReal x97=((0.1952)*x96);
IkReal x98=(py*r00);
IkReal x99=((0.1952)*x98);
IkReal x100=(cj0*px*py*r01);
IkReal x101=((8.0)*x100);
IkReal x102=(cj0*px*pz*r02);
IkReal x103=((8.0)*x102);
IkReal x104=(px*py*r00*sj0);
IkReal x105=((8.0)*x104);
IkReal x106=(py*pz*r02*sj0);
IkReal x107=((8.0)*x106);
IkReal x108=(cj0*r00*x84);
IkReal x109=((4.0)*x108);
IkReal x110=(cj0*r00*x88);
IkReal x111=((4.0)*x110);
IkReal x112=(cj0*r00*x92);
IkReal x113=((4.0)*x112);
IkReal x114=(r01*sj0*x84);
IkReal x115=((4.0)*x114);
IkReal x116=(r01*sj0*x88);
IkReal x117=((4.0)*x116);
IkReal x118=(r01*sj0*x92);
IkReal x119=((4.0)*x118);
IkReal x120=((((-1.0)*x97))+(((-1.0)*x109))+(((-0.00481129621986191)*x60))+x99+(((-0.00481129621986191)*x58))+(((-1.0)*x117))+(((-1.0)*(1.63433676118553e-5)*r02))+(((-1.0)*x107))+(((-1.0)*x103))+(((-1.0)*x101))+(((-1.0)*x105))+x115+x119+x113+x111);
IkReal x121=((((-1.0)*x94))+(((-1.0)*x74))+x68+x65+x63+x90+(((-1.0)*x72))+x86+x83+x80+(((-1.0)*x76))+x78+(((-1.0)*x70)));
IkReal x122=(x121+x61+(((-1.0)*x57))+x48+x59+x54+x50+x56+x52);
IkReal x123=((2.67562787392846e-7)*x47);
IkReal x124=((-1.0)*x123);
IkReal x125=((1.09656880079035e-5)*x49);
IkReal x126=((-1.0)*x125);
IkReal x127=((1.09656880079035e-5)*x51);
IkReal x128=((-1.0)*x127);
IkReal x129=((1.09656880079035e-5)*x53);
IkReal x130=((-1.0)*x129);
IkReal x131=((2.67562787392846e-7)*x55);
IkReal x132=((-2.99999999991984)*x62);
IkReal x133=((2.99999999991984)*x67);
IkReal x134=((-2.99999999991984)*x77);
IkReal x135=((2.99999999991984)*x82);
IkReal x136=((8.17168380592765e-6)*r02);
IkReal x137=((1.12259435189007)*x58);
IkReal x138=((0.0976)*x96);
IkReal x139=((-1.0)*x138);
IkReal x140=((0.0976)*x98);
IkReal x141=((1.12259435189007)*x60);
IkReal x142=((4.0)*x100);
IkReal x143=((-1.0)*x142);
IkReal x144=((4.0)*x102);
IkReal x145=((-1.0)*x144);
IkReal x146=((4.0)*x104);
IkReal x147=((-1.0)*x146);
IkReal x148=((4.0)*x106);
IkReal x149=((-1.0)*x148);
IkReal x150=((2.0)*x108);
IkReal x151=((-1.0)*x150);
IkReal x152=((2.0)*x110);
IkReal x153=((2.0)*x112);
IkReal x154=((2.0)*x114);
IkReal x155=((2.0)*x116);
IkReal x156=((-1.0)*x155);
IkReal x157=((2.0)*x118);
IkReal x158=(x139+x130+x133+x131+x132+x137+x135+x134+x128+x124+x126+x156+x157+x152+x151+x154+x153+x149+x147+x141+x140+x145+x143+(((-1.0)*x136)));
IkReal x159=((((-8.0)*x75))+(((4.0)*x85))+(((-8.0)*x71))+(((0.1952)*x64))+(((-0.1952)*x69))+(((4.0)*x89))+(((-4.0)*x93))+(((0.1952)*x79))+(((-0.1952)*x73)));
IkReal x160=(x159+(((1.63433676118553e-5)*x58))+(((2.24518870378014)*r02))+(((1.63433676118553e-5)*x60)));
IkReal x161=(x138+(((-1.0)*x154))+x150+x155+x148+x142+x146+x144+(((-1.0)*x152))+(((-1.0)*x140))+(((-1.0)*x153))+(((-1.0)*x157)));
IkReal x162=(x130+x133+x131+x132+x136+x135+x134+x128+x124+x126+(((-1.0)*x141))+(((-1.0)*x137))+x161);
IkReal x163=((-1.0)*x131);
IkReal x164=((-8.01642089954037e-11)*x62);
IkReal x165=((8.01642089954037e-11)*x67);
IkReal x166=((-8.01642089954037e-11)*x77);
IkReal x167=((8.01642089954037e-11)*x82);
IkReal x168=((5.25822e-8)*r02);
IkReal x169=((0.0024056480498078)*x58);
IkReal x170=((0.0024056480498078)*x60);
IkReal x171=(x139+x129+x125+x127+x123+(((-1.0)*x170))+x156+x157+x152+x151+x154+x153+x149+x147+x140+x145+x143+(((-1.0)*x169))+x163+x164+x165+x166+x167+x168);
IkReal x172=(x159+(((-1.051644e-7)*x58))+(((-1.0)*(0.0048112960996156)*r02))+(((-1.051644e-7)*x60)));
IkReal x173=(x129+x125+x127+x123+(((-1.0)*x168))+x170+x161+x163+x164+x165+x166+x167+x169);
IkReal x174=((0.0024056480498078)*r02);
IkReal x175=((5.25822e-8)*x58);
IkReal x176=((-0.036599999998044)*x47);
IkReal x177=((-1.49999999991984)*x49);
IkReal x178=((-1.49999999991984)*x51);
IkReal x179=((-1.49999999991984)*x53);
IkReal x180=((0.036599999998044)*x55);
IkReal x181=((5.25822e-8)*x60);
IkReal x182=(x121+(((-1.0)*x174))+(((-1.0)*x175))+x179+x178+x177+x176+(((-1.0)*x181))+x180);
IkReal x183=(x103+x105+x101+x107+x109+(((-1.0)*x113))+x97+(((-1.0)*x111))+(((-1.0)*(1.051644e-7)*r02))+(((0.0048112960996156)*x58))+(((-1.0)*x115))+(((0.0048112960996156)*x60))+(((-1.0)*x99))+(((-1.0)*x119))+x117);
IkReal x184=(x68+x66+x63+x91+x94+x81+x83+x87+x179+x178+x177+x176+x175+x174+x70+x72+x74+x76+x78+x181+x180);
IkReal gconst40=x95;
IkReal gconst41=x120;
IkReal gconst42=x122;
IkReal gconst43=x158;
IkReal gconst44=x160;
IkReal gconst45=x162;
IkReal gconst46=x95;
IkReal gconst47=x120;
IkReal gconst48=x122;
IkReal gconst49=x158;
IkReal gconst50=x160;
IkReal gconst51=x162;
IkReal gconst52=x171;
IkReal gconst53=x172;
IkReal gconst54=x173;
IkReal gconst55=x182;
IkReal gconst56=x183;
IkReal gconst57=x184;
IkReal gconst58=x171;
IkReal gconst59=x172;
IkReal gconst60=x173;
IkReal gconst61=x182;
IkReal gconst62=x183;
IkReal gconst63=x184;
IkReal x185=(gconst52*gconst57*gconst60);
IkReal x186=(gconst53*gconst57*gconst58);
IkReal x187=(gconst54*gconst55*gconst58);
IkReal x188=(gconst54*gconst56*gconst59);
IkReal x189=((1.0)*gconst52*gconst57*gconst58);
IkReal x190=((1.0)*gconst61);
IkReal x191=(gconst53*gconst57*gconst59);
IkReal x192=(gconst54*gconst55*gconst60);
IkReal x193=((1.0)*gconst54*gconst56*gconst58);
IkReal x194=(gconst40*gconst57*gconst60);
IkReal x195=(gconst41*gconst57*gconst58);
IkReal x196=(gconst42*gconst55*gconst58);
IkReal x197=(gconst42*gconst56*gconst59);
IkReal x198=(gconst43*gconst54*gconst58);
IkReal x199=(gconst44*gconst54*gconst59);
IkReal x200=(gconst45*gconst52*gconst60);
IkReal x201=(gconst45*gconst53*gconst58);
IkReal x202=(gconst46*gconst53*gconst57);
IkReal x203=(gconst46*gconst54*gconst55);
IkReal x204=(gconst47*gconst54*gconst56);
IkReal x205=(gconst48*gconst52*gconst57);
IkReal x206=((1.0)*gconst40*gconst57*gconst58);
IkReal x207=((1.0)*gconst41*gconst57*gconst59);
IkReal x208=((1.0)*gconst42*gconst55*gconst60);
IkReal x209=((1.0)*gconst42*gconst56*gconst58);
IkReal x210=((1.0)*gconst43*gconst54*gconst60);
IkReal x211=((1.0)*gconst44*gconst54*gconst58);
IkReal x212=((1.0)*gconst45*gconst52*gconst58);
IkReal x213=((1.0)*gconst45*gconst53*gconst59);
IkReal x214=((1.0)*gconst46*gconst52*gconst57);
IkReal x215=((1.0)*gconst46*gconst54*gconst56);
IkReal x216=((1.0)*gconst47*gconst53*gconst57);
IkReal x217=((1.0)*gconst48*gconst54*gconst55);
IkReal x218=((1.0)*gconst49);
IkReal x219=(gconst40*gconst45*gconst60);
IkReal x220=(gconst40*gconst48*gconst57);
IkReal x221=(gconst41*gconst45*gconst58);
IkReal x222=(gconst41*gconst46*gconst57);
IkReal x223=(gconst42*gconst43*gconst58);
IkReal x224=(gconst42*gconst44*gconst59);
IkReal x225=(gconst42*gconst46*gconst55);
IkReal x226=(gconst42*gconst47*gconst56);
IkReal x227=(gconst43*gconst46*gconst54);
IkReal x228=(gconst44*gconst47*gconst54);
IkReal x229=(gconst45*gconst46*gconst53);
IkReal x230=(gconst45*gconst48*gconst52);
IkReal x231=((1.0)*gconst40*gconst45*gconst58);
IkReal x232=((1.0)*gconst40*gconst46*gconst57);
IkReal x233=((1.0)*gconst41*gconst45*gconst59);
IkReal x234=((1.0)*gconst41*gconst47*gconst57);
IkReal x235=((1.0)*gconst42*gconst43*gconst60);
IkReal x236=((1.0)*gconst42*gconst44*gconst58);
IkReal x237=((1.0)*gconst42*gconst46*gconst56);
IkReal x238=((1.0)*gconst42*gconst48*gconst55);
IkReal x239=((1.0)*gconst43*gconst48*gconst54);
IkReal x240=((1.0)*gconst44*gconst46*gconst54);
IkReal x241=((1.0)*gconst45*gconst46*gconst52);
IkReal x242=((1.0)*gconst45*gconst47*gconst53);
IkReal x243=(gconst40*gconst45*gconst48);
IkReal x244=(gconst41*gconst45*gconst46);
IkReal x245=(gconst42*gconst43*gconst46);
IkReal x246=(gconst42*gconst44*gconst47);
IkReal x247=((1.0)*gconst40*gconst45*gconst46);
IkReal x248=((1.0)*gconst41*gconst45*gconst47);
IkReal x249=((1.0)*gconst42*gconst43*gconst48);
IkReal x250=((1.0)*gconst42*gconst44*gconst46);
op[0]=(((gconst63*x187))+(((-1.0)*gconst63*x189))+(((-1.0)*gconst62*x193))+(((-1.0)*x190*x192))+((gconst62*x186))+(((-1.0)*x190*x191))+((gconst61*x188))+((gconst61*x185)));
op[1]=((((-1.0)*gconst61*x208))+(((-1.0)*gconst61*x207))+((gconst61*x204))+(((-1.0)*gconst61*x216))+((gconst62*x201))+((gconst61*x194))+(((-1.0)*gconst61*x213))+((gconst49*x185))+(((-1.0)*x192*x218))+((gconst62*x202))+(((-1.0)*gconst62*x209))+(((-1.0)*gconst61*x217))+(((-1.0)*gconst62*x215))+((gconst61*x200))+(((-1.0)*gconst51*x189))+((gconst62*x195))+((gconst61*x205))+((gconst61*x197))+((gconst49*x188))+((gconst61*x199))+(((-1.0)*gconst63*x212))+(((-1.0)*gconst63*x206))+(((-1.0)*gconst61*x210))+(((-1.0)*gconst62*x211))+(((-1.0)*gconst63*x214))+(((-1.0)*x191*x218))+((gconst51*x187))+((gconst63*x198))+(((-1.0)*gconst50*x193))+((gconst63*x203))+((gconst63*x196))+((gconst50*x186)));
op[2]=((((-1.0)*gconst63*x231))+((gconst50*x195))+(((-1.0)*gconst61*x234))+(((-1.0)*gconst49*x208))+((gconst61*x226))+(((-1.0)*gconst62*x240))+((gconst61*x228))+(((-1.0)*gconst63*x241))+((gconst62*x221))+(((-1.0)*gconst51*x214))+(((-1.0)*gconst50*x215))+(((-1.0)*gconst49*x210))+((gconst49*x199))+((gconst49*x204))+((gconst51*x196))+(((-1.0)*gconst61*x239))+((gconst50*x202))+((gconst51*x198))+((gconst49*x197))+((gconst50*x201))+(((-1.0)*gconst51*x212))+((gconst63*x225))+((gconst61*x230))+(((-1.0)*gconst61*x238))+(((-1.0)*gconst49*x213))+((gconst51*x203))+((gconst62*x229))+(((-1.0)*gconst50*x209))+((gconst49*x194))+((gconst49*x205))+((gconst63*x223))+((gconst62*x222))+(((-1.0)*gconst61*x242))+((gconst63*x227))+((gconst61*x219))+(((-1.0)*gconst63*x232))+(((-1.0)*gconst61*x233))+((gconst49*x200))+(((-1.0)*gconst62*x237))+(((-1.0)*gconst49*x207))+((gconst61*x220))+(((-1.0)*gconst49*x217))+(((-1.0)*gconst62*x236))+(((-1.0)*gconst51*x206))+((gconst61*x224))+(((-1.0)*gconst49*x216))+(((-1.0)*gconst61*x235))+(((-1.0)*gconst50*x211)));
op[3]=((((-1.0)*gconst49*x234))+(((-1.0)*gconst49*x235))+((gconst49*x224))+(((-1.0)*gconst51*x231))+((gconst61*x243))+((gconst51*x225))+(((-1.0)*gconst49*x238))+((gconst50*x222))+(((-1.0)*gconst49*x233))+(((-1.0)*gconst51*x241))+((gconst49*x226))+(((-1.0)*gconst49*x239))+((gconst50*x229))+(((-1.0)*gconst50*x237))+((gconst49*x219))+((gconst51*x223))+((gconst61*x246))+(((-1.0)*gconst61*x248))+((gconst62*x244))+((gconst49*x228))+((gconst49*x230))+((gconst63*x245))+(((-1.0)*gconst51*x232))+((gconst50*x221))+(((-1.0)*gconst49*x242))+(((-1.0)*gconst63*x247))+((gconst49*x220))+(((-1.0)*gconst61*x249))+(((-1.0)*gconst50*x236))+(((-1.0)*gconst50*x240))+((gconst51*x227))+(((-1.0)*gconst62*x250)));
op[4]=(((gconst49*x246))+((gconst51*x245))+(((-1.0)*gconst51*x247))+((gconst50*x244))+(((-1.0)*gconst49*x249))+(((-1.0)*gconst49*x248))+(((-1.0)*gconst50*x250))+((gconst49*x243)));
polyroots4(op,zeror,numroots);
IkReal j2array[4], cj2array[4], sj2array[4], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[4]={true,true,true,true};
_nj2 = 4;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x251=IKPowWithIntegerCheck(IKsign(((((((((-0.561297175945034)*cj0*r00))+(((2.62911e-8)*r01*sj0*sj2))+(((2.0)*cj0*px*pz*r02))+(((-0.0488)*pz*r00*sj0*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((-0.0488)*py*r00))+(((-0.561297175945034)*cj2*r01*sj0))+(((0.0488)*cj2*px*r01))+(((2.0)*px*pz*r00*sj2))+(((2.0)*cj0*cj2*px*pz*r02))+(((2.0)*cj0*cj2*px*py*r01))+(((-1.0)*cj2*r01*sj0*(px*px)))+(((2.0)*cj0*px*py*r01))+(((-1.0)*r01*sj0*(px*px)))+(((-0.0488)*cj2*py*r00))+(((2.0)*cj2*px*py*r00*sj0))+(((1.0)*r01*sj0*(py*py)))+(((-1.0)*r02*sj2*(py*py)))+(((-1.0)*r01*sj0*(pz*pz)))+(((2.0)*py*pz*r02*sj0))+(((-1.0)*cj0*r00*(py*py)))+(((1.0)*cj0*r00*(px*px)))+(((-1.0)*cj2*r01*sj0*(pz*pz)))+(((1.0)*r02*sj2*(pz*pz)))+(((2.0)*cj2*py*pz*r02*sj0))+(((2.62911e-8)*cj0*r00*sj2))+(((-0.0488)*cj0*py*r02*sj2))+(((0.0488)*px*r01))+(((0.0488)*px*r02*sj0*sj2))+(((1.0)*cj0*cj2*r00*(px*px)))+(((4.08584190296382e-6)*cj2*r02))+(((0.0488)*cj0*pz*r01*sj2))+(((2.0)*px*py*r00*sj0))+(((-0.561297175945034)*cj0*cj2*r00))+(((1.0)*cj2*r01*sj0*(py*py)))+(((0.0012028240249039)*r02*sj2))+(((-0.561297175945034)*r01*sj0))+(((-1.0)*cj0*r00*(pz*pz)))+(((-1.0)*cj0*cj2*r00*(py*py)))+(((2.0)*py*pz*r01*sj2))+(((-1.0)*cj0*cj2*r00*(pz*pz)))+(((4.08584190296382e-6)*r02))))*(((((-2.0)*cj0*px*pz*r02))+(((-1.0)*r01*sj0*(py*py)))+(((-0.00120282405496548)*cj0*r00))+((cj2*r01*sj0*(px*px)))+(((-2.62911e-8)*cj0*r00*sj2))+((cj0*r00*(pz*pz)))+(((-0.00120282405496548)*cj2*r01*sj0))+((r02*sj2*(py*py)))+((cj2*r01*sj0*(pz*pz)))+(((-0.00120282405496548)*cj0*cj2*r00))+(((-1.0)*cj0*cj2*r00*(px*px)))+(((-2.0)*py*pz*r01*sj2))+(((-2.0)*cj2*py*pz*r02*sj0))+((r02*sj2*(px*px)))+((r01*sj0*(px*px)))+(((-0.00120282405496548)*r01*sj0))+((cj0*cj2*r00*(py*py)))+(((-2.0)*cj0*cj2*px*py*r01))+(((-4.08584190296382e-6)*cj2*r02))+(((0.0488)*cj2*py*r00))+(((-0.0488)*cj0*pz*r01*sj2))+(((-4.08584190296382e-6)*r02))+((cj0*cj2*r00*(pz*pz)))+(((-0.0012028240249039)*r02*sj2))+(((-2.0)*py*pz*r02*sj0))+(((-0.0488)*cj2*px*r01))+(((-1.0)*cj0*r00*(px*px)))+(((-0.0488)*px*r02*sj0*sj2))+(((0.0488)*pz*r00*sj0*sj2))+(((0.0488)*cj0*py*r02*sj2))+(((-2.0)*px*py*r00*sj0))+(((-1.0)*cj2*r01*sj0*(py*py)))+(((-1.0)*r02*sj2*(pz*pz)))+(((0.0488)*py*r00))+(((-0.0488)*px*r01))+(((-2.62911e-8)*r01*sj0*sj2))+((cj0*r00*(py*py)))+((r01*sj0*(pz*pz)))+(((-2.0)*cj0*px*py*r01))+(((-2.0)*cj2*px*py*r00*sj0))+(((-2.0)*px*pz*r00*sj2))+(((-2.0)*cj0*cj2*px*pz*r02))))))+(((((((-2.62911e-8)*r02*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((2.0)*py*pz*r02*sj0*sj2))+(((-0.0488)*cj0*cj2*pz*r01))+(((-1.0)*r02*(pz*pz)))+(((-2.0)*py*pz*r01))+(((0.561297175945034)*cj2*r02))+(((-1.0)*cj0*r00*sj2*(py*py)))+((cj0*r00*sj2*(px*px)))+(((0.561297175945034)*r02))+(((2.0)*px*py*r00*sj0*sj2))+(((4.08584190296382e-6)*cj2*r01*sj0))+(((0.0488)*cj0*py*r02))+(((-2.0)*cj2*py*pz*r01))+((r01*sj0*sj2*(py*py)))+((cj2*r02*(px*px)))+(((0.0012028240249039)*r01*sj0*sj2))+(((4.08584190296382e-6)*r01*sj0))+((r02*(py*py)))+(((-1.0)*cj0*r00*sj2*(pz*pz)))+(((-0.0488)*px*r02*sj0))+(((0.0488)*pz*r00*sj0))+(((-2.0)*px*pz*r00))+((cj2*r02*(py*py)))+(((-0.0488)*py*r00*sj2))+(((2.0)*cj0*px*py*r01*sj2))+(((2.0)*cj0*px*pz*r02*sj2))+(((0.0012028240249039)*cj0*r00*sj2))+(((-0.0488)*cj0*pz*r01))+(((4.08584190296382e-6)*cj0*cj2*r00))+(((-1.0)*r01*sj0*sj2*(px*px)))+(((-1.0)*r01*sj0*sj2*(pz*pz)))+(((0.0488)*cj0*cj2*py*r02))+(((4.08584190296382e-6)*cj0*r00))+(((-0.0488)*cj2*px*r02*sj0))+((r02*(px*px)))+(((-2.0)*cj2*px*pz*r00))+(((0.0488)*cj2*pz*r00*sj0))+(((0.0488)*px*r01*sj2))))*(((((2.0)*cj2*px*pz*r00))+(((-4.08584190296382e-6)*r01*sj0))+(((0.0488)*cj2*px*r02*sj0))+(((-2.0)*px*py*r00*sj0*sj2))+(((2.0)*cj2*py*pz*r01))+(((0.0488)*py*r00*sj2))+(((-1.0)*cj2*r02*(px*px)))+(((0.00120282405496548)*cj2*r02))+((r01*sj0*sj2*(px*px)))+(((0.0488)*cj0*cj2*pz*r01))+(((-0.0488)*cj0*cj2*py*r02))+(((-0.0488)*pz*r00*sj0))+(((-0.0488)*px*r01*sj2))+(((-1.0)*cj2*r02*(py*py)))+((cj0*r00*sj2*(py*py)))+(((-4.08584190296382e-6)*cj0*r00))+(((0.0488)*cj0*pz*r01))+(((-2.0)*cj0*px*pz*r02*sj2))+((r01*sj0*sj2*(pz*pz)))+(((-2.0)*cj0*px*py*r01*sj2))+(((-1.0)*r02*(py*py)))+(((-1.0)*r01*sj0*sj2*(py*py)))+(((2.62911e-8)*r02*sj2))+(((-2.0)*py*pz*r02*sj0*sj2))+(((-0.0488)*cj2*pz*r00*sj0))+((cj2*r02*(pz*pz)))+(((2.0)*px*pz*r00))+(((-0.0012028240249039)*cj0*r00*sj2))+(((-1.0)*cj0*r00*sj2*(px*px)))+(((-0.0012028240249039)*r01*sj0*sj2))+(((-0.0488)*cj0*py*r02))+((r02*(pz*pz)))+(((0.00120282405496548)*r02))+((cj0*r00*sj2*(pz*pz)))+(((0.0488)*px*r02*sj0))+(((-1.0)*r02*(px*px)))+(((-4.08584190296382e-6)*cj2*r01*sj0))+(((2.0)*py*pz*r01))+(((-4.08584190296382e-6)*cj0*cj2*r00)))))))),-1);
if(!x251.valid){
continue;
}
CheckValue<IkReal> x252 = IKatan2WithCheck(IkReal(((((((((0.749999999959918)*px*r00*sj2))+(((5.48284400395176e-6)*cj2*py*r01))+(((5.48284400395176e-6)*cj0*pz*r00*sj2))+(((0.749999999959918)*py*r01*sj2))+(((5.48284400395176e-6)*cj2*pz*r02))+(((1.49999999995992)*cj2*py*r02*sj0))+(((-1.33781393696423e-7)*r00*sj0))+(((1.33781393696423e-7)*cj0*r01))+(((1.49999999995992)*py*r02*sj0))+(((-1.49999999995992)*pz*r01*sj0))+(((0.749999999959918)*pz*r02*sj2))+(((-1.49999999995992)*cj2*pz*r01*sj0))+(((1.49999999995992)*cj0*cj2*px*r02))+(((5.48284400395176e-6)*cj2*px*r00))+(((-1.49999999995992)*cj0*pz*r00))+(((-5.48284400395176e-6)*cj0*px*r02*sj2))+(((5.48284400395176e-6)*py*r01))+(((5.48284400395176e-6)*pz*r01*sj0*sj2))+(((-1.33781393696423e-7)*cj2*r00*sj0))+(((-5.48284400395176e-6)*py*r02*sj0*sj2))+(((1.49999999995992)*cj0*px*r02))+(((5.48284400395176e-6)*px*r00))+(((5.48284400395176e-6)*pz*r02))+(((-1.49999999995992)*cj0*cj2*pz*r00))+(((0.018299999999022)*cj0*r01*sj2))+(((-0.018299999999022)*r00*sj0*sj2))+(((1.33781393696423e-7)*cj0*cj2*r01))))*(((((2.0)*cj2*px*pz*r00))+(((-4.08584190296382e-6)*r01*sj0))+(((0.0488)*cj2*px*r02*sj0))+(((-2.0)*px*py*r00*sj0*sj2))+(((2.0)*cj2*py*pz*r01))+(((0.0488)*py*r00*sj2))+(((-1.0)*cj2*r02*(px*px)))+(((0.00120282405496548)*cj2*r02))+((r01*sj0*sj2*(px*px)))+(((0.0488)*cj0*cj2*pz*r01))+(((-0.0488)*cj0*cj2*py*r02))+(((-0.0488)*pz*r00*sj0))+(((-0.0488)*px*r01*sj2))+(((-1.0)*cj2*r02*(py*py)))+((cj0*r00*sj2*(py*py)))+(((-4.08584190296382e-6)*cj0*r00))+(((0.0488)*cj0*pz*r01))+(((-2.0)*cj0*px*pz*r02*sj2))+((r01*sj0*sj2*(pz*pz)))+(((-2.0)*cj0*px*py*r01*sj2))+(((-1.0)*r02*(py*py)))+(((-1.0)*r01*sj0*sj2*(py*py)))+(((2.62911e-8)*r02*sj2))+(((-2.0)*py*pz*r02*sj0*sj2))+(((-0.0488)*cj2*pz*r00*sj0))+((cj2*r02*(pz*pz)))+(((2.0)*px*pz*r00))+(((-0.0012028240249039)*cj0*r00*sj2))+(((-1.0)*cj0*r00*sj2*(px*px)))+(((-0.0012028240249039)*r01*sj0*sj2))+(((-0.0488)*cj0*py*r02))+((r02*(pz*pz)))+(((0.00120282405496548)*r02))+((cj0*r00*sj2*(pz*pz)))+(((0.0488)*px*r02*sj0))+(((-1.0)*r02*(px*px)))+(((-4.08584190296382e-6)*cj2*r01*sj0))+(((2.0)*py*pz*r01))+(((-4.08584190296382e-6)*cj0*cj2*r00))))))+(((((((-5.48284400395176e-6)*pz*r01*sj0))+(((-0.018300000000978)*cj2*r00*sj0))+(((0.018300000000978)*cj0*cj2*r01))+(((-1.33781393696423e-7)*r00*sj0*sj2))+(((4.00821044977018e-11)*pz*r01*sj0*sj2))+(((5.48284400395176e-6)*pz*r02*sj2))+(((0.750000000040082)*py*r01))+(((5.48284400395176e-6)*py*r01*sj2))+(((-4.00821044977018e-11)*py*r02*sj0*sj2))+(((-5.48284400395176e-6)*cj0*cj2*pz*r00))+(((5.48284400395176e-6)*cj2*py*r02*sj0))+(((0.750000000040082)*cj2*py*r01))+(((0.750000000040082)*cj2*px*r00))+(((0.750000000040082)*cj2*pz*r02))+(((0.750000000040082)*pz*r02))+(((0.750000000040082)*px*r00))+(((-4.00821044977018e-11)*cj0*px*r02*sj2))+(((-5.48284400395176e-6)*cj2*pz*r01*sj0))+(((0.018300000000978)*cj0*r01))+(((-0.018300000000978)*r00*sj0))+(((5.48284400395176e-6)*cj0*px*r02))+(((-5.48284400395176e-6)*cj0*pz*r00))+(((5.48284400395176e-6)*px*r00*sj2))+(((4.00821044977018e-11)*cj0*pz*r00*sj2))+(((1.33781393696423e-7)*cj0*r01*sj2))+(((5.48284400395176e-6)*py*r02*sj0))+(((5.48284400395176e-6)*cj0*cj2*px*r02))))*(((((-2.0)*cj0*px*pz*r02))+(((0.561297175945034)*cj0*cj2*r00))+(((-1.0)*r01*sj0*(py*py)))+((cj2*r01*sj0*(px*px)))+(((-2.62911e-8)*cj0*r00*sj2))+((cj0*r00*(pz*pz)))+((r02*sj2*(py*py)))+((cj2*r01*sj0*(pz*pz)))+(((0.561297175945034)*r01*sj0))+(((-1.0)*cj0*cj2*r00*(px*px)))+(((0.561297175945034)*cj2*r01*sj0))+(((-2.0)*py*pz*r01*sj2))+(((-2.0)*cj2*py*pz*r02*sj0))+((r02*sj2*(px*px)))+((r01*sj0*(px*px)))+((cj0*cj2*r00*(py*py)))+(((-2.0)*cj0*cj2*px*py*r01))+(((-4.08584190296382e-6)*cj2*r02))+(((0.0488)*cj2*py*r00))+(((-0.0488)*cj0*pz*r01*sj2))+(((-4.08584190296382e-6)*r02))+((cj0*cj2*r00*(pz*pz)))+(((-0.0012028240249039)*r02*sj2))+(((-2.0)*py*pz*r02*sj0))+(((-0.0488)*cj2*px*r01))+(((-1.0)*cj0*r00*(px*px)))+(((-0.0488)*px*r02*sj0*sj2))+(((0.0488)*pz*r00*sj0*sj2))+(((0.0488)*cj0*py*r02*sj2))+(((-2.0)*px*py*r00*sj0))+(((-1.0)*cj2*r01*sj0*(py*py)))+(((-1.0)*r02*sj2*(pz*pz)))+(((0.0488)*py*r00))+(((-0.0488)*px*r01))+(((-2.62911e-8)*r01*sj0*sj2))+((cj0*r00*(py*py)))+((r01*sj0*(pz*pz)))+(((-2.0)*cj0*px*py*r01))+(((-2.0)*cj2*px*py*r00*sj0))+(((-2.0)*px*pz*r00*sj2))+(((-2.0)*cj0*cj2*px*pz*r02))+(((0.561297175945034)*cj0*r00)))))))),IkReal(((((((((-0.749999999959918)*pz*r02*sj2))+(((1.49999999995992)*cj0*cj2*pz*r00))+(((-1.33781393696423e-7)*cj0*r01))+(((-5.48284400395176e-6)*cj2*px*r00))+(((1.33781393696423e-7)*cj2*r00*sj0))+(((1.49999999995992)*cj0*pz*r00))+(((0.018299999999022)*r00*sj0*sj2))+(((-1.49999999995992)*cj0*cj2*px*r02))+(((1.49999999995992)*pz*r01*sj0))+(((-0.018299999999022)*cj0*r01*sj2))+(((1.33781393696423e-7)*r00*sj0))+(((-0.749999999959918)*py*r01*sj2))+(((-5.48284400395176e-6)*pz*r01*sj0*sj2))+(((5.48284400395176e-6)*py*r02*sj0*sj2))+(((-5.48284400395176e-6)*pz*r02))+(((5.48284400395176e-6)*cj0*px*r02*sj2))+(((-5.48284400395176e-6)*px*r00))+(((-1.49999999995992)*py*r02*sj0))+(((-5.48284400395176e-6)*py*r01))+(((-5.48284400395176e-6)*cj0*pz*r00*sj2))+(((-1.49999999995992)*cj0*px*r02))+(((-1.33781393696423e-7)*cj0*cj2*r01))+(((1.49999999995992)*cj2*pz*r01*sj0))+(((-0.749999999959918)*px*r00*sj2))+(((-5.48284400395176e-6)*cj2*py*r01))+(((-1.49999999995992)*cj2*py*r02*sj0))+(((-5.48284400395176e-6)*cj2*pz*r02))))*(((((-2.0)*cj0*px*pz*r02))+(((-1.0)*r01*sj0*(py*py)))+(((-0.00120282405496548)*cj0*r00))+((cj2*r01*sj0*(px*px)))+(((-2.62911e-8)*cj0*r00*sj2))+((cj0*r00*(pz*pz)))+(((-0.00120282405496548)*cj2*r01*sj0))+((r02*sj2*(py*py)))+((cj2*r01*sj0*(pz*pz)))+(((-0.00120282405496548)*cj0*cj2*r00))+(((-1.0)*cj0*cj2*r00*(px*px)))+(((-2.0)*py*pz*r01*sj2))+(((-2.0)*cj2*py*pz*r02*sj0))+((r02*sj2*(px*px)))+((r01*sj0*(px*px)))+(((-0.00120282405496548)*r01*sj0))+((cj0*cj2*r00*(py*py)))+(((-2.0)*cj0*cj2*px*py*r01))+(((-4.08584190296382e-6)*cj2*r02))+(((0.0488)*cj2*py*r00))+(((-0.0488)*cj0*pz*r01*sj2))+(((-4.08584190296382e-6)*r02))+((cj0*cj2*r00*(pz*pz)))+(((-0.0012028240249039)*r02*sj2))+(((-2.0)*py*pz*r02*sj0))+(((-0.0488)*cj2*px*r01))+(((-1.0)*cj0*r00*(px*px)))+(((-0.0488)*px*r02*sj0*sj2))+(((0.0488)*pz*r00*sj0*sj2))+(((0.0488)*cj0*py*r02*sj2))+(((-2.0)*px*py*r00*sj0))+(((-1.0)*cj2*r01*sj0*(py*py)))+(((-1.0)*r02*sj2*(pz*pz)))+(((0.0488)*py*r00))+(((-0.0488)*px*r01))+(((-2.62911e-8)*r01*sj0*sj2))+((cj0*r00*(py*py)))+((r01*sj0*(pz*pz)))+(((-2.0)*cj0*px*py*r01))+(((-2.0)*cj2*px*py*r00*sj0))+(((-2.0)*px*pz*r00*sj2))+(((-2.0)*cj0*cj2*px*pz*r02))))))+(((((((-5.48284400395176e-6)*cj0*px*r02))+(((-0.750000000040082)*cj2*py*r01))+(((-1.33781393696423e-7)*cj0*r01*sj2))+(((-4.00821044977018e-11)*pz*r01*sj0*sj2))+(((-5.48284400395176e-6)*py*r01*sj2))+(((-5.48284400395176e-6)*py*r02*sj0))+(((-0.750000000040082)*py*r01))+(((0.018300000000978)*r00*sj0))+(((-4.00821044977018e-11)*cj0*pz*r00*sj2))+(((0.018300000000978)*cj2*r00*sj0))+(((5.48284400395176e-6)*cj0*pz*r00))+(((4.00821044977018e-11)*cj0*px*r02*sj2))+(((-0.750000000040082)*px*r00))+(((-5.48284400395176e-6)*cj0*cj2*px*r02))+(((5.48284400395176e-6)*cj0*cj2*pz*r00))+(((-5.48284400395176e-6)*cj2*py*r02*sj0))+(((-5.48284400395176e-6)*px*r00*sj2))+(((-0.750000000040082)*cj2*pz*r02))+(((5.48284400395176e-6)*cj2*pz*r01*sj0))+(((-5.48284400395176e-6)*pz*r02*sj2))+(((5.48284400395176e-6)*pz*r01*sj0))+(((-0.018300000000978)*cj0*cj2*r01))+(((4.00821044977018e-11)*py*r02*sj0*sj2))+(((-0.750000000040082)*pz*r02))+(((-0.750000000040082)*cj2*px*r00))+(((-0.018300000000978)*cj0*r01))+(((1.33781393696423e-7)*r00*sj0*sj2))))*(((((-2.62911e-8)*r02*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((2.0)*py*pz*r02*sj0*sj2))+(((-0.0488)*cj0*cj2*pz*r01))+(((-1.0)*r02*(pz*pz)))+(((-2.0)*py*pz*r01))+(((0.561297175945034)*cj2*r02))+(((-1.0)*cj0*r00*sj2*(py*py)))+((cj0*r00*sj2*(px*px)))+(((0.561297175945034)*r02))+(((2.0)*px*py*r00*sj0*sj2))+(((4.08584190296382e-6)*cj2*r01*sj0))+(((0.0488)*cj0*py*r02))+(((-2.0)*cj2*py*pz*r01))+((r01*sj0*sj2*(py*py)))+((cj2*r02*(px*px)))+(((0.0012028240249039)*r01*sj0*sj2))+(((4.08584190296382e-6)*r01*sj0))+((r02*(py*py)))+(((-1.0)*cj0*r00*sj2*(pz*pz)))+(((-0.0488)*px*r02*sj0))+(((0.0488)*pz*r00*sj0))+(((-2.0)*px*pz*r00))+((cj2*r02*(py*py)))+(((-0.0488)*py*r00*sj2))+(((2.0)*cj0*px*py*r01*sj2))+(((2.0)*cj0*px*pz*r02*sj2))+(((0.0012028240249039)*cj0*r00*sj2))+(((-0.0488)*cj0*pz*r01))+(((4.08584190296382e-6)*cj0*cj2*r00))+(((-1.0)*r01*sj0*sj2*(px*px)))+(((-1.0)*r01*sj0*sj2*(pz*pz)))+(((0.0488)*cj0*cj2*py*r02))+(((4.08584190296382e-6)*cj0*r00))+(((-0.0488)*cj2*px*r02*sj0))+((r02*(px*px)))+(((-2.0)*cj2*px*pz*r00))+(((0.0488)*cj2*pz*r00*sj0))+(((0.0488)*px*r01*sj2)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x252.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x251.value)))+(x252.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
evalcond[0]=((((-5.48284400395176e-6)*pz*r01*sj0))+(((-0.018300000000978)*cj2*r00*sj0))+(((0.018300000000978)*cj0*cj2*r01))+(((-1.33781393696423e-7)*r00*sj0*sj2))+(((4.00821044977018e-11)*pz*r01*sj0*sj2))+(((5.48284400395176e-6)*pz*r02*sj2))+(((0.750000000040082)*py*r01))+(((5.48284400395176e-6)*py*r01*sj2))+(((-4.00821044977018e-11)*py*r02*sj0*sj2))+(((-5.48284400395176e-6)*cj0*cj2*pz*r00))+(((5.48284400395176e-6)*cj2*py*r02*sj0))+(((((((2.0)*cj2*px*pz*r00))+(((-4.08584190296382e-6)*r01*sj0))+(((0.0488)*cj2*px*r02*sj0))+(((-2.0)*px*py*r00*sj0*sj2))+(((2.0)*cj2*py*pz*r01))+(((0.0488)*py*r00*sj2))+(((-1.0)*cj2*r02*(px*px)))+(((0.00120282405496548)*cj2*r02))+((r01*sj0*sj2*(px*px)))+(((0.0488)*cj0*cj2*pz*r01))+(((-0.0488)*cj0*cj2*py*r02))+(((-0.0488)*pz*r00*sj0))+(((-0.0488)*px*r01*sj2))+(((-1.0)*cj2*r02*(py*py)))+((cj0*r00*sj2*(py*py)))+(((-4.08584190296382e-6)*cj0*r00))+(((0.0488)*cj0*pz*r01))+(((-2.0)*cj0*px*pz*r02*sj2))+((r01*sj0*sj2*(pz*pz)))+(((-2.0)*cj0*px*py*r01*sj2))+(((-1.0)*r02*(py*py)))+(((-1.0)*r01*sj0*sj2*(py*py)))+(((2.62911e-8)*r02*sj2))+(((-2.0)*py*pz*r02*sj0*sj2))+(((-0.0488)*cj2*pz*r00*sj0))+((cj2*r02*(pz*pz)))+(((2.0)*px*pz*r00))+(((-0.0012028240249039)*cj0*r00*sj2))+(((-1.0)*cj0*r00*sj2*(px*px)))+(((-0.0012028240249039)*r01*sj0*sj2))+(((-0.0488)*cj0*py*r02))+((r02*(pz*pz)))+(((0.00120282405496548)*r02))+((cj0*r00*sj2*(pz*pz)))+(((0.0488)*px*r02*sj0))+(((-1.0)*r02*(px*px)))+(((-4.08584190296382e-6)*cj2*r01*sj0))+(((2.0)*py*pz*r01))+(((-4.08584190296382e-6)*cj0*cj2*r00))))*(IKcos(j1))))+(((0.750000000040082)*cj2*py*r01))+(((0.750000000040082)*cj2*px*r00))+(((0.750000000040082)*cj2*pz*r02))+(((0.750000000040082)*pz*r02))+(((0.750000000040082)*px*r00))+(((((((-2.0)*cj0*px*pz*r02))+(((-1.0)*r01*sj0*(py*py)))+(((-0.00120282405496548)*cj0*r00))+((cj2*r01*sj0*(px*px)))+(((-2.62911e-8)*cj0*r00*sj2))+((cj0*r00*(pz*pz)))+(((-0.00120282405496548)*cj2*r01*sj0))+((r02*sj2*(py*py)))+((cj2*r01*sj0*(pz*pz)))+(((-0.00120282405496548)*cj0*cj2*r00))+(((-1.0)*cj0*cj2*r00*(px*px)))+(((-2.0)*py*pz*r01*sj2))+(((-2.0)*cj2*py*pz*r02*sj0))+((r02*sj2*(px*px)))+((r01*sj0*(px*px)))+(((-0.00120282405496548)*r01*sj0))+((cj0*cj2*r00*(py*py)))+(((-2.0)*cj0*cj2*px*py*r01))+(((-4.08584190296382e-6)*cj2*r02))+(((0.0488)*cj2*py*r00))+(((-0.0488)*cj0*pz*r01*sj2))+(((-4.08584190296382e-6)*r02))+((cj0*cj2*r00*(pz*pz)))+(((-0.0012028240249039)*r02*sj2))+(((-2.0)*py*pz*r02*sj0))+(((-0.0488)*cj2*px*r01))+(((-1.0)*cj0*r00*(px*px)))+(((-0.0488)*px*r02*sj0*sj2))+(((0.0488)*pz*r00*sj0*sj2))+(((0.0488)*cj0*py*r02*sj2))+(((-2.0)*px*py*r00*sj0))+(((-1.0)*cj2*r01*sj0*(py*py)))+(((-1.0)*r02*sj2*(pz*pz)))+(((0.0488)*py*r00))+(((-0.0488)*px*r01))+(((-2.62911e-8)*r01*sj0*sj2))+((cj0*r00*(py*py)))+((r01*sj0*(pz*pz)))+(((-2.0)*cj0*px*py*r01))+(((-2.0)*cj2*px*py*r00*sj0))+(((-2.0)*px*pz*r00*sj2))+(((-2.0)*cj0*cj2*px*pz*r02))))*(IKsin(j1))))+(((-4.00821044977018e-11)*cj0*px*r02*sj2))+(((-5.48284400395176e-6)*cj2*pz*r01*sj0))+(((0.018300000000978)*cj0*r01))+(((-0.018300000000978)*r00*sj0))+(((5.48284400395176e-6)*cj0*px*r02))+(((-5.48284400395176e-6)*cj0*pz*r00))+(((5.48284400395176e-6)*px*r00*sj2))+(((4.00821044977018e-11)*cj0*pz*r00*sj2))+(((1.33781393696423e-7)*cj0*r01*sj2))+(((5.48284400395176e-6)*py*r02*sj0))+(((5.48284400395176e-6)*cj0*cj2*px*r02)));
evalcond[1]=((((((((-2.62911e-8)*r02*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((2.0)*py*pz*r02*sj0*sj2))+(((-0.0488)*cj0*cj2*pz*r01))+(((-1.0)*r02*(pz*pz)))+(((-2.0)*py*pz*r01))+(((0.561297175945034)*cj2*r02))+(((-1.0)*cj0*r00*sj2*(py*py)))+((cj0*r00*sj2*(px*px)))+(((0.561297175945034)*r02))+(((2.0)*px*py*r00*sj0*sj2))+(((4.08584190296382e-6)*cj2*r01*sj0))+(((0.0488)*cj0*py*r02))+(((-2.0)*cj2*py*pz*r01))+((r01*sj0*sj2*(py*py)))+((cj2*r02*(px*px)))+(((0.0012028240249039)*r01*sj0*sj2))+(((4.08584190296382e-6)*r01*sj0))+((r02*(py*py)))+(((-1.0)*cj0*r00*sj2*(pz*pz)))+(((-0.0488)*px*r02*sj0))+(((0.0488)*pz*r00*sj0))+(((-2.0)*px*pz*r00))+((cj2*r02*(py*py)))+(((-0.0488)*py*r00*sj2))+(((2.0)*cj0*px*py*r01*sj2))+(((2.0)*cj0*px*pz*r02*sj2))+(((0.0012028240249039)*cj0*r00*sj2))+(((-0.0488)*cj0*pz*r01))+(((4.08584190296382e-6)*cj0*cj2*r00))+(((-1.0)*r01*sj0*sj2*(px*px)))+(((-1.0)*r01*sj0*sj2*(pz*pz)))+(((0.0488)*cj0*cj2*py*r02))+(((4.08584190296382e-6)*cj0*r00))+(((-0.0488)*cj2*px*r02*sj0))+((r02*(px*px)))+(((-2.0)*cj2*px*pz*r00))+(((0.0488)*cj2*pz*r00*sj0))+(((0.0488)*px*r01*sj2))))*(IKsin(j1))))+(((-0.749999999959918)*pz*r02*sj2))+(((1.49999999995992)*cj0*cj2*pz*r00))+(((-1.33781393696423e-7)*cj0*r01))+(((-5.48284400395176e-6)*cj2*px*r00))+(((1.33781393696423e-7)*cj2*r00*sj0))+(((1.49999999995992)*cj0*pz*r00))+(((0.018299999999022)*r00*sj0*sj2))+(((((((-2.0)*cj0*px*pz*r02))+(((0.561297175945034)*cj0*cj2*r00))+(((-1.0)*r01*sj0*(py*py)))+((cj2*r01*sj0*(px*px)))+(((-2.62911e-8)*cj0*r00*sj2))+((cj0*r00*(pz*pz)))+((r02*sj2*(py*py)))+((cj2*r01*sj0*(pz*pz)))+(((0.561297175945034)*r01*sj0))+(((-1.0)*cj0*cj2*r00*(px*px)))+(((0.561297175945034)*cj2*r01*sj0))+(((-2.0)*py*pz*r01*sj2))+(((-2.0)*cj2*py*pz*r02*sj0))+((r02*sj2*(px*px)))+((r01*sj0*(px*px)))+((cj0*cj2*r00*(py*py)))+(((-2.0)*cj0*cj2*px*py*r01))+(((-4.08584190296382e-6)*cj2*r02))+(((0.0488)*cj2*py*r00))+(((-0.0488)*cj0*pz*r01*sj2))+(((-4.08584190296382e-6)*r02))+((cj0*cj2*r00*(pz*pz)))+(((-0.0012028240249039)*r02*sj2))+(((-2.0)*py*pz*r02*sj0))+(((-0.0488)*cj2*px*r01))+(((-1.0)*cj0*r00*(px*px)))+(((-0.0488)*px*r02*sj0*sj2))+(((0.0488)*pz*r00*sj0*sj2))+(((0.0488)*cj0*py*r02*sj2))+(((-2.0)*px*py*r00*sj0))+(((-1.0)*cj2*r01*sj0*(py*py)))+(((-1.0)*r02*sj2*(pz*pz)))+(((0.0488)*py*r00))+(((-0.0488)*px*r01))+(((-2.62911e-8)*r01*sj0*sj2))+((cj0*r00*(py*py)))+((r01*sj0*(pz*pz)))+(((-2.0)*cj0*px*py*r01))+(((-2.0)*cj2*px*py*r00*sj0))+(((-2.0)*px*pz*r00*sj2))+(((-2.0)*cj0*cj2*px*pz*r02))+(((0.561297175945034)*cj0*r00))))*(IKcos(j1))))+(((-1.49999999995992)*cj0*cj2*px*r02))+(((1.49999999995992)*pz*r01*sj0))+(((-0.018299999999022)*cj0*r01*sj2))+(((1.33781393696423e-7)*r00*sj0))+(((-0.749999999959918)*py*r01*sj2))+(((-5.48284400395176e-6)*pz*r01*sj0*sj2))+(((5.48284400395176e-6)*py*r02*sj0*sj2))+(((-5.48284400395176e-6)*pz*r02))+(((5.48284400395176e-6)*cj0*px*r02*sj2))+(((-5.48284400395176e-6)*px*r00))+(((-1.49999999995992)*py*r02*sj0))+(((-5.48284400395176e-6)*py*r01))+(((-5.48284400395176e-6)*cj0*pz*r00*sj2))+(((-1.49999999995992)*cj0*px*r02))+(((-1.33781393696423e-7)*cj0*cj2*r01))+(((1.49999999995992)*cj2*pz*r01*sj0))+(((-0.749999999959918)*px*r00*sj2))+(((-5.48284400395176e-6)*cj2*py*r01))+(((-1.49999999995992)*cj2*py*r02*sj0))+(((-5.48284400395176e-6)*cj2*pz*r02)));
evalcond[2]=((((-5.48284400395176e-6)*pz*r01*sj0))+(((-0.018299999999022)*cj0*r01))+(((0.018299999999022)*cj0*cj2*r01))+(((0.018299999999022)*r00*sj0))+(((-1.49999999995992)*cj0*px*r02*sj2))+(((-1.33781393696423e-7)*cj0*r01*sj2))+(((-5.48284400395176e-6)*py*r01*sj2))+(((0.749999999959918)*cj2*px*r00))+(((-0.749999999959918)*px*r00))+(((-5.48284400395176e-6)*cj0*cj2*px*r02))+(((-0.749999999959918)*pz*r02))+(((5.48284400395176e-6)*cj0*cj2*pz*r00))+(((-5.48284400395176e-6)*cj2*py*r02*sj0))+(((0.749999999959918)*cj2*pz*r02))+(((-5.48284400395176e-6)*px*r00*sj2))+(((5.48284400395176e-6)*cj2*pz*r01*sj0))+(((-5.48284400395176e-6)*pz*r02*sj2))+(((-0.749999999959918)*py*r01))+(((1.49999999995992)*pz*r01*sj0*sj2))+(((5.48284400395176e-6)*cj0*px*r02))+(((1.33781393696423e-7)*r00*sj0*sj2))+(((-5.48284400395176e-6)*cj0*pz*r00))+(((0.749999999959918)*cj2*py*r01))+(((((((2.0)*cj0*px*pz*r02))+((cj0*r00*(px*px)))+(((-0.0488)*py*r00))+((cj2*r01*sj0*(px*px)))+((r02*sj2*(py*py)))+((cj2*r01*sj0*(pz*pz)))+(((4.08584190296382e-6)*cj0*r00*sj2))+(((-1.0)*cj0*cj2*r00*(px*px)))+(((-0.0012028240249039)*cj0*cj2*r00))+(((2.0)*cj0*px*py*r01))+(((4.08584190296382e-6)*r01*sj0*sj2))+(((-2.62911e-8)*r02))+(((-2.0)*py*pz*r01*sj2))+(((-1.0)*r01*sj0*(px*px)))+(((-2.0)*cj2*py*pz*r02*sj0))+(((0.0012028240249039)*cj0*r00))+((r02*sj2*(px*px)))+(((-1.0)*r01*sj0*(pz*pz)))+(((2.0)*py*pz*r02*sj0))+((cj0*cj2*r00*(py*py)))+(((-1.0)*cj0*r00*(py*py)))+(((-2.0)*cj0*cj2*px*py*r01))+((r01*sj0*(py*py)))+(((2.62911e-8)*cj2*r02))+(((-0.0012028240249039)*cj2*r01*sj0))+(((0.0488)*cj2*py*r00))+(((-0.0488)*cj0*pz*r01*sj2))+((cj0*cj2*r00*(pz*pz)))+(((0.0488)*px*r01))+(((-0.0488)*cj2*px*r01))+(((-0.0488)*px*r02*sj0*sj2))+(((0.0488)*pz*r00*sj0*sj2))+(((0.0488)*cj0*py*r02*sj2))+(((2.0)*px*py*r00*sj0))+(((-1.0)*cj2*r01*sj0*(py*py)))+(((-1.0)*r02*sj2*(pz*pz)))+(((0.561297175945034)*r02*sj2))+(((-1.0)*cj0*r00*(pz*pz)))+(((0.0012028240249039)*r01*sj0))+(((-2.0)*cj2*px*py*r00*sj0))+(((-2.0)*px*pz*r00*sj2))+(((-2.0)*cj0*cj2*px*pz*r02))))*(IKsin(j1))))+(((((((2.0)*cj2*px*pz*r00))+(((0.0488)*cj2*px*r02*sj0))+(((-2.0)*px*py*r00*sj0*sj2))+(((2.62911e-8)*cj0*cj2*r00))+(((2.0)*cj2*py*pz*r01))+(((-1.0)*r02*(pz*pz)))+(((0.0488)*py*r00*sj2))+(((-1.0)*cj2*r02*(px*px)))+(((-2.0)*py*pz*r01))+((r01*sj0*sj2*(px*px)))+(((0.0488)*cj0*cj2*pz*r01))+(((-0.0488)*cj0*cj2*py*r02))+(((0.0488)*cj0*py*r02))+(((-0.0488)*px*r01*sj2))+(((0.561297175945034)*cj0*r00*sj2))+(((-1.0)*cj2*r02*(py*py)))+(((-4.08584190296382e-6)*r02*sj2))+((cj0*r00*sj2*(py*py)))+((r02*(py*py)))+(((-0.0488)*px*r02*sj0))+(((0.0488)*pz*r00*sj0))+(((-2.0)*px*pz*r00))+(((-2.0)*cj0*px*pz*r02*sj2))+(((0.561297175945034)*r01*sj0*sj2))+((r01*sj0*sj2*(pz*pz)))+(((-2.0)*cj0*px*py*r01*sj2))+(((-1.0)*r01*sj0*sj2*(py*py)))+(((-0.0488)*cj0*pz*r01))+(((-2.0)*py*pz*r02*sj0*sj2))+(((-0.0488)*cj2*pz*r00*sj0))+((cj2*r02*(pz*pz)))+(((-2.62911e-8)*r01*sj0))+(((-1.0)*cj0*r00*sj2*(px*px)))+((r02*(px*px)))+((cj0*r00*sj2*(pz*pz)))+(((0.0012028240249039)*cj2*r02))+(((2.62911e-8)*cj2*r01*sj0))+(((-2.62911e-8)*cj0*r00))+(((-0.0012028240249039)*r02))))*(IKcos(j1))))+(((-1.49999999995992)*py*r02*sj0*sj2))+(((-0.018299999999022)*cj2*r00*sj0))+(((1.49999999995992)*cj0*pz*r00*sj2))+(((5.48284400395176e-6)*py*r02*sj0)));
evalcond[3]=((((4.00821044977018e-11)*cj2*py*r02*sj0))+(((4.00821044977018e-11)*cj0*pz*r00))+(((-5.48284400395176e-6)*cj2*px*r00))+(((1.33781393696423e-7)*cj2*r00*sj0))+(((4.00821044977018e-11)*pz*r01*sj0))+(((((((-2.0)*cj0*px*pz*r02))+(((-0.0488)*pz*r00*sj0*sj2))+(((-1.0)*r01*sj0*(py*py)))+(((-4.08584190296382e-6)*r01*sj0*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((0.0488)*cj2*px*r01))+((cj0*r00*(pz*pz)))+((cj0*cj2*r00*(px*px)))+(((2.0)*px*pz*r00*sj2))+(((2.0)*cj0*cj2*px*pz*r02))+(((0.0012028240249039)*cj0*cj2*r00))+(((2.0)*cj0*cj2*px*py*r01))+(((-1.0)*cj2*r01*sj0*(px*px)))+(((2.62911e-8)*r02))+(((-0.0012028240249039)*r01*sj0))+(((-4.08584190296382e-6)*cj0*r00*sj2))+((cj2*r01*sj0*(py*py)))+(((-0.0488)*cj2*py*r00))+(((0.0012028240249039)*cj2*r01*sj0))+(((-2.62911e-8)*cj2*r02))+(((2.0)*cj2*px*py*r00*sj0))+(((-1.0)*r02*sj2*(py*py)))+((r01*sj0*(px*px)))+(((-1.0)*cj2*r01*sj0*(pz*pz)))+(((2.0)*cj2*py*pz*r02*sj0))+(((-0.0488)*cj0*py*r02*sj2))+(((-2.0)*py*pz*r02*sj0))+(((0.0488)*px*r02*sj0*sj2))+((r02*sj2*(pz*pz)))+(((-1.0)*cj0*r00*(px*px)))+(((0.0488)*cj0*pz*r01*sj2))+(((-2.0)*px*py*r00*sj0))+(((0.0488)*py*r00))+(((-0.0488)*px*r01))+((cj0*r00*(py*py)))+(((0.00120282405496548)*r02*sj2))+(((-0.0012028240249039)*cj0*r00))+((r01*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r00*(py*py)))+(((-2.0)*cj0*px*py*r01))+(((2.0)*py*pz*r01*sj2))+(((-1.0)*cj0*cj2*r00*(pz*pz)))))*(IKcos(j1))))+(((-4.00821044977018e-11)*cj2*pz*r01*sj0))+(((0.750000000040082)*pz*r02*sj2))+(((-1.33781393696423e-7)*r00*sj0))+(((-5.48284400395176e-6)*pz*r01*sj0*sj2))+(((1.33781393696423e-7)*cj0*r01))+(((0.018300000000978)*cj0*r01*sj2))+(((-4.00821044977018e-11)*py*r02*sj0))+(((5.48284400395176e-6)*py*r02*sj0*sj2))+(((-4.00821044977018e-11)*cj0*cj2*pz*r00))+(((-0.018300000000978)*r00*sj0*sj2))+(((5.48284400395176e-6)*cj0*px*r02*sj2))+(((4.00821044977018e-11)*cj0*cj2*px*r02))+(((5.48284400395176e-6)*py*r01))+(((-5.48284400395176e-6)*cj0*pz*r00*sj2))+(((5.48284400395176e-6)*px*r00))+(((5.48284400395176e-6)*pz*r02))+(((-1.33781393696423e-7)*cj0*cj2*r01))+(((((((-0.00120282405496548)*r01*sj0*sj2))+(((2.0)*cj2*px*pz*r00))+(((0.0488)*cj2*px*r02*sj0))+(((-2.0)*px*py*r00*sj0*sj2))+(((2.62911e-8)*cj0*cj2*r00))+(((2.0)*cj2*py*pz*r01))+(((-1.0)*r02*(pz*pz)))+(((0.0488)*py*r00*sj2))+(((-1.0)*cj2*r02*(px*px)))+(((-2.0)*py*pz*r01))+((r01*sj0*sj2*(px*px)))+(((0.0488)*cj0*cj2*pz*r01))+(((-0.0488)*cj0*cj2*py*r02))+(((0.0488)*cj0*py*r02))+(((-0.0488)*px*r01*sj2))+(((-1.0)*cj2*r02*(py*py)))+(((-4.08584190296382e-6)*r02*sj2))+((cj0*r00*sj2*(py*py)))+((r02*(py*py)))+(((-0.0488)*px*r02*sj0))+(((0.0488)*pz*r00*sj0))+(((-2.0)*px*pz*r00))+(((-2.0)*cj0*px*pz*r02*sj2))+((r01*sj0*sj2*(pz*pz)))+(((-2.0)*cj0*px*py*r01*sj2))+(((-1.0)*r01*sj0*sj2*(py*py)))+(((-0.0488)*cj0*pz*r01))+(((-0.00120282405496548)*cj0*r00*sj2))+(((-2.0)*py*pz*r02*sj0*sj2))+(((-0.0488)*cj2*pz*r00*sj0))+((cj2*r02*(pz*pz)))+(((-2.62911e-8)*r01*sj0))+(((-1.0)*cj0*r00*sj2*(px*px)))+((r02*(px*px)))+((cj0*r00*sj2*(pz*pz)))+(((0.0012028240249039)*cj2*r02))+(((2.62911e-8)*cj2*r01*sj0))+(((-2.62911e-8)*cj0*r00))+(((-0.0012028240249039)*r02))))*(IKsin(j1))))+(((-5.48284400395176e-6)*cj2*py*r01))+(((-4.00821044977018e-11)*cj0*px*r02))+(((-5.48284400395176e-6)*cj2*pz*r02))+(((0.750000000040082)*py*r01*sj2))+(((0.750000000040082)*px*r00*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x253=(cj1*cj2*pz);
IkReal x254=(cj1*pz*sj2);
IkReal x255=(cj2*pz*sj1);
IkReal x256=(pz*sj1*sj2);
IkReal x257=(cj0*cj1*cj2*px);
IkReal x258=(cj0*cj1*px*sj2);
IkReal x259=(cj0*cj2*px*sj1);
IkReal x260=(cj0*px*sj1*sj2);
IkReal x261=(cj1*cj2*py*sj0);
IkReal x262=(cj1*py*sj0*sj2);
IkReal x263=(cj2*py*sj0*sj1);
IkReal x264=(py*sj0*sj1*sj2);
if( IKabs(((6.46485556414546e-5)+(((0.000172396148377212)*x253))+(((-23.5821247481796)*x264))+(((8.84329678056736)*sj2))+(((23.5821247481796)*x254))+(((23.5821247481796)*x257))+(((-0.000172396148377212)*x263))+(((23.5821247481796)*x261))+(((-0.000172396148377212)*x259))+(((23.5821247481796)*x255))+(((-0.000172396148377212)*x258))+(((-0.000172396148377212)*x262))+(((-0.000172396148377212)*x256))+(((-23.5821247481796)*x260))+(((6.46485556414546e-5)*cj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-8.84329678056736)+(((-23.5821247481796)*x253))+(((0.000172396148377212)*x261))+(((-1.0)*(8.84329678056736)*cj2))+(((23.5821247481796)*x263))+(((6.46485556414546e-5)*sj2))+(((0.000172396148377212)*x255))+(((23.5821247481796)*x258))+(((-0.000172396148377212)*x264))+(((23.5821247481796)*x259))+(((23.5821247481796)*x256))+(((-0.000172396148377212)*x260))+(((0.000172396148377212)*x254))+(((0.000172396148377212)*x257))+(((23.5821247481796)*x262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((6.46485556414546e-5)+(((0.000172396148377212)*x253))+(((-23.5821247481796)*x264))+(((8.84329678056736)*sj2))+(((23.5821247481796)*x254))+(((23.5821247481796)*x257))+(((-0.000172396148377212)*x263))+(((23.5821247481796)*x261))+(((-0.000172396148377212)*x259))+(((23.5821247481796)*x255))+(((-0.000172396148377212)*x258))+(((-0.000172396148377212)*x262))+(((-0.000172396148377212)*x256))+(((-23.5821247481796)*x260))+(((6.46485556414546e-5)*cj2))))+IKsqr(((-8.84329678056736)+(((-23.5821247481796)*x253))+(((0.000172396148377212)*x261))+(((-1.0)*(8.84329678056736)*cj2))+(((23.5821247481796)*x263))+(((6.46485556414546e-5)*sj2))+(((0.000172396148377212)*x255))+(((23.5821247481796)*x258))+(((-0.000172396148377212)*x264))+(((23.5821247481796)*x259))+(((23.5821247481796)*x256))+(((-0.000172396148377212)*x260))+(((0.000172396148377212)*x254))+(((0.000172396148377212)*x257))+(((23.5821247481796)*x262))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((6.46485556414546e-5)+(((0.000172396148377212)*x253))+(((-23.5821247481796)*x264))+(((8.84329678056736)*sj2))+(((23.5821247481796)*x254))+(((23.5821247481796)*x257))+(((-0.000172396148377212)*x263))+(((23.5821247481796)*x261))+(((-0.000172396148377212)*x259))+(((23.5821247481796)*x255))+(((-0.000172396148377212)*x258))+(((-0.000172396148377212)*x262))+(((-0.000172396148377212)*x256))+(((-23.5821247481796)*x260))+(((6.46485556414546e-5)*cj2))), ((-8.84329678056736)+(((-23.5821247481796)*x253))+(((0.000172396148377212)*x261))+(((-1.0)*(8.84329678056736)*cj2))+(((23.5821247481796)*x263))+(((6.46485556414546e-5)*sj2))+(((0.000172396148377212)*x255))+(((23.5821247481796)*x258))+(((-0.000172396148377212)*x264))+(((23.5821247481796)*x259))+(((23.5821247481796)*x256))+(((-0.000172396148377212)*x260))+(((0.000172396148377212)*x254))+(((0.000172396148377212)*x257))+(((23.5821247481796)*x262))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x265=IKsin(j3);
IkReal x266=(cj2*x265);
IkReal x267=IKcos(j3);
IkReal x268=(cj2*x267);
IkReal x269=(sj2*x265);
IkReal x270=(sj2*x267);
IkReal x271=((1.0)*cj0*sj1);
IkReal x272=((1.0)*sj0*sj1);
IkReal x273=((1.0)*sj1);
IkReal x274=((1.0)*cj0*cj1);
IkReal x275=((1.0)*cj1*sj0);
IkReal x276=((0.923878258400475)*cj4);
IkReal x277=((0.382686508326207)*sj4);
evalcond[0]=((0.375)+(((0.375)*cj2))+(((-3.1e-7)*x266))+((cj1*pz))+(((-3.1e-7)*x270))+(((-1.0)*px*x271))+(((-0.042405)*x269))+(((0.042405)*x268))+(((-1.0)*py*x272)));
evalcond[1]=((((-3.1e-7)*x269))+(((0.042405)*x270))+(((-1.0)*px*x274))+(((0.042405)*x266))+(((-1.0)*pz*x273))+(((-1.0)*py*x275))+(((3.1e-7)*x268))+(((0.375)*sj2)));
evalcond[2]=((((-1.0)*r00*x271))+((cj1*r02))+((x270*x277))+((x266*x277))+((x270*x276))+(((-1.0)*r01*x272))+((x266*x276)));
evalcond[3]=((((-1.0)*x268*x277))+(((-1.0)*r02*x273))+(((-1.0)*r00*x274))+((x269*x277))+((x269*x276))+(((-1.0)*r01*x275))+(((-1.0)*x268*x276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - edwin (2456c5cd7e7eef7197eef98032cf2716)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
